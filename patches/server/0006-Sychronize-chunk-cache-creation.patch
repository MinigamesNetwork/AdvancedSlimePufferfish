From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: shoker137 <andreybest2002@ya.ru>
Date: Sun, 8 Oct 2023 00:00:50 +0300
Subject: [PATCH] Sychronize chunk cache creation


diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 3a7ab91aa4d63a49eabdb5440e2b0829325c34f6..85c471356f723ec20803be29afed705bc2af7141 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -189,7 +189,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
     private static final int EMPTY_TIME_NO_TICK = 300;
     private static final int MAX_SCHEDULED_TICKS_PER_TICK = 65536;
     final List<ServerPlayer> players;
-    public final ServerChunkCache chunkSource;
+    public ServerChunkCache chunkSource = null;
     private final MinecraftServer server;
     public final PrimaryLevelData serverLevelData; // CraftBukkit - type
     final EntityTickList entityTickList;
@@ -706,8 +706,11 @@ public class ServerLevel extends Level implements WorldGenLevel {
         //PersistentEntitySectionManager persistententitysectionmanager = this.entityManager; // Paper - rewrite chunk system
 
         //Objects.requireNonNull(this.entityManager); // Paper - rewrite chunk system
-        this.chunkSource = new ServerChunkCache(bootstrap, this, convertable_conversionsession, datafixer, structuretemplatemanager, executor, chunkgenerator, j, k, flag2, worldloadlistener, null, () -> { // Paper - rewrite chunk system // ASWM
-            return minecraftserver.overworld().getDataStorage();
+        ChunkGenerator finalChunkgenerator = chunkgenerator;
+        sync(() -> {
+            this.chunkSource = new ServerChunkCache(bootstrap, this, convertable_conversionsession, datafixer, structuretemplatemanager, executor, finalChunkgenerator, j, k, flag2, worldloadlistener, null, () -> { // Paper - rewrite chunk system // ASWM
+                return minecraftserver.overworld().getDataStorage();
+            });
         });
         this.chunkSource.getGeneratorState().ensureStructuresGenerated();
         this.portalForcer = new PortalForcer(this);
